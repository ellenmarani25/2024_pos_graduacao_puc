{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"https://github.com/dipucriodigital/ciencia-de-dados-e-analytics/blob/main/machine-learning/ML_Aula1a.ipynb","timestamp":1708439345078}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"xjOpLDcTBbbM"},"source":["## Machine Learning - Prof. Tatiana Escovedo\n","## Aula 01: Problemas de Classificação\n","\n","### Prática 1"]},{"cell_type":"code","metadata":{"id":"sPMp7QfrBZNd","executionInfo":{"status":"ok","timestamp":1708732854600,"user_tz":180,"elapsed":268,"user":{"displayName":"Ellen Marani","userId":"12398875903697158088"}}},"source":["\n","# Imports necessários\n","import pandas as pd # Para manipulação dos dados\n","import numpy as np #\n","import matplotlib.pyplot as plt # Para visualizar gráficos\n","from sklearn.model_selection import train_test_split # para particionar em bases de treino e teste (holdout)\n","from sklearn.neighbors import KNeighborsClassifier # algoritmo KNN\n","from sklearn.tree import DecisionTreeClassifier # algoritmo Árvore de Classificação\n","from sklearn.naive_bayes import GaussianNB # algoritmo Naive Bayes\n","from sklearn.svm import SVC # algoritmo SVM\n","from sklearn.datasets import load_diabetes"],"execution_count":36,"outputs":[]},{"cell_type":"code","source":["# Carga do dataset\n","diabetes = load_diabetes()\n","from sklearn.datasets import load_diabetes"],"metadata":{"id":"VGEdZHUpYFpO","executionInfo":{"status":"ok","timestamp":1708732857186,"user_tz":180,"elapsed":614,"user":{"displayName":"Ellen Marani","userId":"12398875903697158088"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["\n","# Preparação dos dados\n","\n","diabetes_df = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)\n","diabetes_df['target'] = diabetes.target\n","\n","# Separação em bases de treino e teste (holdout)\n","array_diabetes = diabetes_df.values\n","x_diabetes = array_diabetes[:, 0:10]\n","y_diabetes = array_diabetes[:, 10]\n","\n","x_train_diabetes, x_test_diabetes, y_train_diabetes, y_test_diabetes = train_test_split(x_diabetes, y_diabetes, test_size=0.20, random_state=7) # faz a divisão\n","\n","# Criando os folds para a validação cruzada\n","num_particoes = 10 # número de folds da validação cruzada\n","kfold = KFold(n_splits=num_particoes, shuffle=True, random_state=7) # faz o particionamento em 10 folds"],"metadata":{"id":"CpZgzNECTmo3","executionInfo":{"status":"ok","timestamp":1708732859127,"user_tz":180,"elapsed":479,"user":{"displayName":"Ellen Marani","userId":"12398875903697158088"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["# Modelagem\n","\n","# Definindo uma seed global para esta célula de código\n","np.random.seed(7)\n","\n","# Listas para armazenar os modelos, os resultados e os nomes dos modelos\n","models_diabetes = []\n","results_diabetes = []\n","names_diabetes = []\n","\n","# Preparando os modelos e adicionando-os em uma lista\n","models_diabetes =[]\n","models_diabetes.append(('KNN', KNeighborsClassifier()))\n","models_diabetes.append(('CART', DecisionTreeClassifier()))\n","models_diabetes.append(('NB', GaussianNB()))\n","models_diabetes.append(('SVM', SVC()))\n","\n","# Avaliando um modelo por vez\n","for name, model in models_diabetes:\n","    cv_results_diabetes = cross_val_score(model, x_train_diabetes, y_train_diabetes, cv=kfold, scoring='accuracy')\n","    results_diabetes.append(cv_results_diabetes)\n","    names_diabetes.append(name)\n","    msg_diabetes = \"%s: %f (%f)\" % (name, cv_results_diabetes.mean(), cv_results_diabetes.std())  # média e desvio padrão dos 10 resultados da validação cruzada\n","    print(msg_diabetes)\n","\n","# Boxplot de comparação dos modelos\n","fig_diabetes = plt.figure()\n","fig_diabetes.suptitle('Comparação da Acurácia dos Modelos')\n","ax_diabetes = fig_diabetes.add_subplot(111)\n","ax_diabetes.boxplot(results_diabetes, labels=names_diabetes)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":547},"id":"WCwi5olTYPXt","outputId":"3715f7a8-4358-4e31-aefa-0339a0338984","executionInfo":{"status":"ok","timestamp":1708732862830,"user_tz":180,"elapsed":1621,"user":{"displayName":"Ellen Marani","userId":"12398875903697158088"}}},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["KNN: 0.002778 (0.008333)\n","CART: 0.008333 (0.017786)\n","NB: 0.000000 (0.000000)\n","SVM: 0.005556 (0.011111)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Criando um modelo com todo o conjunto de treino\n","model_diabetes = GaussianNB()\n","model_diabetes.fit(x_train_diabetes, y_train_diabetes)\n","\n","# Fazendo as predições com o conjunto de teste\n","predictions_diabetes = model_diabetes.predict(x_test_diabetes)\n","\n","# Estimando a acurácia no conjunto de teste\n","print(accuracy_score(y_test_diabetes,  predictions_diabetes))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6W6ftDx5YSKZ","outputId":"a72afaa3-81a2-4571-91a0-b5dd11ca8d17","executionInfo":{"status":"ok","timestamp":1708732866461,"user_tz":180,"elapsed":277,"user":{"displayName":"Ellen Marani","userId":"12398875903697158088"}}},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["0.033707865168539325\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"rlIPdtApIz7k"},"execution_count":null,"outputs":[]}]}